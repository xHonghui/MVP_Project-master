package fussen.yu.news;

import fussen.yu.news.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SPORT".
 */
public class Sport {

    private Long sportID;
    /** Not-null value. */
    private String date;
    /** Not-null value. */
    private String sportTime;
    /** Not-null value. */
    private String distance;
    /** Not-null value. */
    private String average;
    /** Not-null value. */
    private String pace;
    /** Not-null value. */
    private String calories;
    private Long userID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SportDao myDao;

    private User user;
    private Long user__resolvedKey;


    public Sport() {
    }

    public Sport(Long sportID) {
        this.sportID = sportID;
    }

    public Sport(Long sportID, String date, String sportTime, String distance, String average, String pace, String calories, Long userID) {
        this.sportID = sportID;
        this.date = date;
        this.sportTime = sportTime;
        this.distance = distance;
        this.average = average;
        this.pace = pace;
        this.calories = calories;
        this.userID = userID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSportDao() : null;
    }

    public Long getSportID() {
        return sportID;
    }

    public void setSportID(Long sportID) {
        this.sportID = sportID;
    }

    /** Not-null value. */
    public String getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(String date) {
        this.date = date;
    }

    /** Not-null value. */
    public String getSportTime() {
        return sportTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSportTime(String sportTime) {
        this.sportTime = sportTime;
    }

    /** Not-null value. */
    public String getDistance() {
        return distance;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDistance(String distance) {
        this.distance = distance;
    }

    /** Not-null value. */
    public String getAverage() {
        return average;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAverage(String average) {
        this.average = average;
    }

    /** Not-null value. */
    public String getPace() {
        return pace;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPace(String pace) {
        this.pace = pace;
    }

    /** Not-null value. */
    public String getCalories() {
        return calories;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCalories(String calories) {
        this.calories = calories;
    }

    public Long getUserID() {
        return userID;
    }

    public void setUserID(Long userID) {
        this.userID = userID;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.userID;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userID = user == null ? null : user.getUserID();
            user__resolvedKey = userID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
